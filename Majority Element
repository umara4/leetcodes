# Intuition
The problem requires finding the majority element in an array, which is an element that appears more than ⌊n/2⌋ times. One efficient approach to solve this problem is by using the Boyer-Moore Voting Algorithm.

# Approach
The Boyer-Moore Voting Algorithm keeps track of a potential candidate for the majority element as well as a count of how many times that candidate appears. It iterates through the array, and whenever the count reaches 0, it updates the candidate to the current element and resets the count to 1. This is because if a majority element exists, it will have a count greater than the sum of counts of all other elements. The algorithm effectively cancels out pairs of different elements, and the candidate that remains in the end is the majority element.

# Complexity
- Time complexity: O(n)

- Space complexity: O(1)


# Code
```cpp
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int candidate = nums[0];
        int count = 1;
    
        for (int i = 1; i < nums.size(); i++) {
            if (count == 0) {
                candidate = nums[i];
                count = 1;
            } else if (nums[i] == candidate) {
                count++;
            } else {
                count--;
            }
        }
    
        return candidate;
    }
};
